{"version":3,"sources":["functions/firebase.js","functions/checkUserExist.js","components/MenuHeader.jsx","App.js","serviceWorker.js","index.js"],"names":["fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","checkUserExists","id","a","newUserData","balance","hero","firestore","collection","doc","toString","get","then","r","exists","set","console","log","MenuHeader","props","separator","mode","map","v","key","onClick","openPanel","selected","App","state","activeView","activePanel","userDataVK","userData","farm","bind","bridge","send","z","setState","x","onSnapshot","listener","data","panel","this","view","openView","left","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yTAaMA,EAAOC,IAASC,cAXC,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAInBT,IAASU,YAEMX,Q,yBCEAY,EAjBM,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACdC,EAAc,CAChBF,GAAIA,EACJG,QAAS,EACTC,KAAM,GAEVjB,EAAKkB,YAAYC,WAAW,SAASC,IAAIP,EAAGQ,YAAYC,MAAMC,MAC1D,SAAAC,GACQA,EAAEC,QACFzB,EAAKkB,YAAYC,WAAW,SAASC,IAAIP,EAAGQ,YAAYK,IAAIX,GAAaQ,MACrE,SAAAC,GAAC,OAAIG,QAAQC,IAAI,yBAVb,mBAeb,GAfa,2CAAH,sD,iBCoBNC,EAlBI,SAACC,GAKhB,OACI,kBAAC,IAAD,CAAaC,WAAW,GACpB,kBAAC,IAAD,CAAMC,KAAK,WANL,CACV,CAAC,6CAAW,QACZ,CAAC,6CAAW,SAMMC,KAAI,SAAAC,GAAC,OACP,kBAAC,IAAD,CAAUC,IAAKD,EAAE,GAAIE,QAAS,WAAON,EAAMO,UAAUH,EAAE,KAAMI,SAAUR,EAAMQ,WAAaJ,EAAE,IAAKA,EAAE,UC+E5GK,E,kDAlFX,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,CACTC,WAAY,OACZC,YAAa,OACbC,WAAY,GACZC,SAAU,GACVC,KAAM,CACFH,YAAa,SAGrB,EAAKL,UAAY,EAAKA,UAAUS,KAAf,gBAXF,E,gEAaE,IAAD,OAChBC,IAAOC,KAAK,eAAgB,IACvBzB,MACG,SAAAC,GAAC,OAAIuB,IAAOC,KAAK,sBAAuB,IACnCzB,MACG,SAAA0B,GACI,EAAKC,SAAS,CACVP,WAAYM,IAEhBrC,EAAgBqC,EAAEpC,IAAIU,MAClB,SAAA4B,GACInD,EAAKkB,YAAYC,WAAW,SAASC,IAAI6B,EAAEpC,GAAGQ,YAAY+B,YAAW,SAAAC,GACjE,EAAKH,SAAS,CACVN,SAAUS,EAASC,SAEvB3B,QAAQC,IAAI,EAAKY,qB,gFAW3Ce,GACNC,KAAKN,SAAS,CACVR,YAAaa,M,+BAGZE,GACLD,KAAKN,SAAS,CACVT,WAAYgB,M,+BAGV,IAAD,OACL,OACI,kBAAC,IAAD,CAAMhB,WAAYe,KAAKhB,MAAMC,YACzB,kBAAC,IAAD,CAAM5B,GAAG,OAAO6B,YAAac,KAAKhB,MAAME,aACpC,kBAAC,IAAD,CAAO7B,GAAG,QACN,kBAAC,EAAD,CAAYwB,UAAWmB,KAAKnB,UAAWC,SAAUkB,KAAKhB,MAAME,cAC5D,kBAAC,IAAD,CAAYN,QAAS,WAAO,EAAKsB,SAAS,UAA1C,wCACA,kBAAC,IAAD,CAAYtB,QAAS,WAAO,EAAKsB,SAAS,UAA1C,kCACA,kBAAC,IAAD,CAAYtB,QAAS,WAAO,EAAKsB,SAAS,UAA1C,8CACA,kBAAC,IAAD,CAAYtB,QAAS,WAAO,EAAKsB,SAAS,UAA1C,0DACA,kBAAC,IAAD,CAAYtB,QAAS,WAAO,EAAKsB,SAAS,UAA1C,oDACA,kBAAC,IAAD,CAAYtB,QAAS,WAAO,EAAKsB,SAAS,UAA1C,2DAEJ,kBAAC,IAAD,CAAO7C,GAAG,QACN,kBAAC,EAAD,CAAYwB,UAAWmB,KAAKnB,UAAWC,SAAUkB,KAAKhB,MAAME,gBAGpE,kBAAC,IAAD,CAAM7B,GAAG,OAAO6B,YAAac,KAAKhB,MAAMK,KAAKH,aACzC,kBAAC,IAAD,CAAO7B,GAAG,QACN,kBAAC,IAAD,CAAa8C,KAAM,kBAAC,IAAD,CAAkBvB,QAAS,WAAO,EAAKsB,SAAS,YAAnE,OAGA,kBAAC,IAAD,CAAQ1B,KAAK,aAAb,8CACA,kBAAC,IAAD,gEACA,kBAAC,IAAD,sEACA,kBAAC,IAAD,qG,GA3EN4B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,c","file":"static/js/main.4d9b6666.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCU3lAPlsxkBORPy2HQfCdayJNIIh0PrV4\",\r\n    authDomain: \"game1-cae49.firebaseapp.com\",\r\n    databaseURL: \"https://game1-cae49.firebaseio.com\",\r\n    projectId: \"game1-cae49\",\r\n    storageBucket: \"game1-cae49.appspot.com\",\r\n    messagingSenderId: \"691468574984\",\r\n    appId: \"1:691468574984:web:1c76454a2ec3020e820cbd\",\r\n    measurementId: \"G-1B23MNQTH4\"\r\n};\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nexport default fire;","import fire from \"./firebase\";\r\nconst checkUserExists = async (id) => {\r\n    const newUserData = {\r\n        id: id,\r\n        balance: 0,\r\n        hero: 0\r\n    }\r\n    fire.firestore().collection('users').doc(id.toString()).get().then(\r\n        r => {\r\n            if(!r.exists){\r\n                fire.firestore().collection('users').doc(id.toString()).set(newUserData).then(\r\n                    r => console.log('Created user...')\r\n                );\r\n            }\r\n        }\r\n    );\r\n    return true;\r\n}\r\nexport default checkUserExists;","import {PanelHeader, Tabs, TabsItem} from \"@vkontakte/vkui\";\r\nimport React from \"react\";\r\n\r\nconst MenuHeader = (props) => {\r\n    const items = [\r\n        ['Главная', 'main'],\r\n        ['Новости', 'news']\r\n    ];\r\n    return (\r\n        <PanelHeader separator={false}>\r\n            <Tabs mode=\"buttons\">\r\n                {\r\n                    items.map(v => (\r\n                        <TabsItem key={v[1]} onClick={() => {props.openPanel(v[1])}} selected={props.selected === v[1]}>{v[0]}</TabsItem>\r\n                    ))\r\n                }\r\n            </Tabs>\r\n        </PanelHeader>\r\n    )\r\n}\r\n\r\nexport default MenuHeader;","import React from 'react';\nimport './App.css';\nimport {Panel, PanelHeader, PanelHeaderBack, View, Root, SimpleCell, PanelHeaderClose, Header} from \"@vkontakte/vkui\";\nimport '@vkontakte/vkui/dist/vkui.css';\nimport fire from './functions/firebase';\nimport checkUserExists from './functions/checkUserExist';\nimport bridge from '@vkontakte/vk-bridge';\nimport MenuHeader from \"./components/MenuHeader\";\n\nclass App extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {\n            activeView: 'main',\n            activePanel: 'main',\n            userDataVK: {},\n            userData: {},\n            farm: {\n                activePanel: 'main'\n            }\n        };\n        this.openPanel = this.openPanel.bind(this);\n    }\n    componentDidMount() {\n        bridge.send(\"VKWebAppInit\", {})\n            .then(\n                r => bridge.send(\"VKWebAppGetUserInfo\", {})\n                    .then(\n                        z => {\n                            this.setState({\n                                userDataVK: z\n                            });\n                            checkUserExists(z.id).then(\n                                x => {\n                                    fire.firestore().collection('users').doc(z.id.toString()).onSnapshot(listener => {\n                                        this.setState({\n                                            userData: listener.data()\n                                        });\n                                        console.log(this.state);\n                                    });\n                                }\n                            );\n                        }\n                    )\n            );\n    }\n    componentWillUnmount() {\n\n    }\n    openPanel(panel){\n        this.setState({\n            activePanel: panel\n        })\n    }\n    openView(view){\n        this.setState({\n            activeView: view\n        })\n    }\n    render() {\n        return (\n            <Root activeView={this.state.activeView}>\n                <View id=\"main\" activePanel={this.state.activePanel}>\n                    <Panel id=\"main\">\n                        <MenuHeader openPanel={this.openPanel} selected={this.state.activePanel}/>\n                        <SimpleCell onClick={() => {this.openView('farm')}}>Нексус</SimpleCell>\n                        <SimpleCell onClick={() => {this.openView('farm')}}>Арена</SimpleCell>\n                        <SimpleCell onClick={() => {this.openView('farm')}}>Магазин</SimpleCell>\n                        <SimpleCell onClick={() => {this.openView('farm')}}>Контракты</SimpleCell>\n                        <SimpleCell onClick={() => {this.openView('farm')}}>Персонаж</SimpleCell>\n                        <SimpleCell onClick={() => {this.openView('farm')}}>Настройки</SimpleCell>\n                    </Panel>\n                    <Panel id=\"news\">\n                        <MenuHeader openPanel={this.openPanel} selected={this.state.activePanel}/>\n                    </Panel>\n                </View>\n                <View id=\"farm\" activePanel={this.state.farm.activePanel}>\n                    <Panel id=\"main\">\n                        <PanelHeader left={<PanelHeaderClose onClick={() => {this.openView('main')}}/>}>\n                            AYE\n                        </PanelHeader>\n                        <Header mode=\"secondary\">локации</Header>\n                        <SimpleCell>Темный лес</SimpleCell>\n                        <SimpleCell>Черные топи</SimpleCell>\n                        <SimpleCell>Упавший корабль</SimpleCell>\n                    </Panel>\n                </View>\n            </Root>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}